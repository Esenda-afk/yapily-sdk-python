# coding: utf-8

"""
    Yapily API

    To access endpoints that require authentication, use your application key and secret created in the Dashboard (https://dashboard.yapily.com)  # noqa: E501

    The version of the OpenAPI document: 0.0.231
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from yapily.configuration import Configuration


class SSARequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'tpp_id': 'str',
        'software_id': 'str',
        'signing_key_id': 'str',
        'transport_key_id': 'str',
        'transport_certificate_id': 'str',
        'signing_certificate_id': 'str'
    }

    attribute_map = {
        'tpp_id': 'tppId',
        'software_id': 'softwareId',
        'signing_key_id': 'signingKeyId',
        'transport_key_id': 'transportKeyId',
        'transport_certificate_id': 'transportCertificateId',
        'signing_certificate_id': 'signingCertificateId'
    }

    def __init__(self, tpp_id=None, software_id=None, signing_key_id=None, transport_key_id=None, transport_certificate_id=None, signing_certificate_id=None, local_vars_configuration=None):  # noqa: E501
        """SSARequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._tpp_id = None
        self._software_id = None
        self._signing_key_id = None
        self._transport_key_id = None
        self._transport_certificate_id = None
        self._signing_certificate_id = None
        self.discriminator = None

        if tpp_id is not None:
            self.tpp_id = tpp_id
        if software_id is not None:
            self.software_id = software_id
        if signing_key_id is not None:
            self.signing_key_id = signing_key_id
        if transport_key_id is not None:
            self.transport_key_id = transport_key_id
        if transport_certificate_id is not None:
            self.transport_certificate_id = transport_certificate_id
        if signing_certificate_id is not None:
            self.signing_certificate_id = signing_certificate_id

    @property
    def tpp_id(self):
        """Gets the tpp_id of this SSARequest.  # noqa: E501


        :return: The tpp_id of this SSARequest.  # noqa: E501
        :rtype: str
        """
        return self._tpp_id

    @tpp_id.setter
    def tpp_id(self, tpp_id):
        """Sets the tpp_id of this SSARequest.


        :param tpp_id: The tpp_id of this SSARequest.  # noqa: E501
        :type: str
        """

        self._tpp_id = tpp_id

    @property
    def software_id(self):
        """Gets the software_id of this SSARequest.  # noqa: E501


        :return: The software_id of this SSARequest.  # noqa: E501
        :rtype: str
        """
        return self._software_id

    @software_id.setter
    def software_id(self, software_id):
        """Sets the software_id of this SSARequest.


        :param software_id: The software_id of this SSARequest.  # noqa: E501
        :type: str
        """

        self._software_id = software_id

    @property
    def signing_key_id(self):
        """Gets the signing_key_id of this SSARequest.  # noqa: E501


        :return: The signing_key_id of this SSARequest.  # noqa: E501
        :rtype: str
        """
        return self._signing_key_id

    @signing_key_id.setter
    def signing_key_id(self, signing_key_id):
        """Sets the signing_key_id of this SSARequest.


        :param signing_key_id: The signing_key_id of this SSARequest.  # noqa: E501
        :type: str
        """

        self._signing_key_id = signing_key_id

    @property
    def transport_key_id(self):
        """Gets the transport_key_id of this SSARequest.  # noqa: E501


        :return: The transport_key_id of this SSARequest.  # noqa: E501
        :rtype: str
        """
        return self._transport_key_id

    @transport_key_id.setter
    def transport_key_id(self, transport_key_id):
        """Sets the transport_key_id of this SSARequest.


        :param transport_key_id: The transport_key_id of this SSARequest.  # noqa: E501
        :type: str
        """

        self._transport_key_id = transport_key_id

    @property
    def transport_certificate_id(self):
        """Gets the transport_certificate_id of this SSARequest.  # noqa: E501


        :return: The transport_certificate_id of this SSARequest.  # noqa: E501
        :rtype: str
        """
        return self._transport_certificate_id

    @transport_certificate_id.setter
    def transport_certificate_id(self, transport_certificate_id):
        """Sets the transport_certificate_id of this SSARequest.


        :param transport_certificate_id: The transport_certificate_id of this SSARequest.  # noqa: E501
        :type: str
        """

        self._transport_certificate_id = transport_certificate_id

    @property
    def signing_certificate_id(self):
        """Gets the signing_certificate_id of this SSARequest.  # noqa: E501


        :return: The signing_certificate_id of this SSARequest.  # noqa: E501
        :rtype: str
        """
        return self._signing_certificate_id

    @signing_certificate_id.setter
    def signing_certificate_id(self, signing_certificate_id):
        """Sets the signing_certificate_id of this SSARequest.


        :param signing_certificate_id: The signing_certificate_id of this SSARequest.  # noqa: E501
        :type: str
        """

        self._signing_certificate_id = signing_certificate_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SSARequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SSARequest):
            return True

        return self.to_dict() != other.to_dict()
