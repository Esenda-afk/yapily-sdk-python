# coding: utf-8

"""
    Yapily API

    To access endpoints that require authentication, use your application key and secret created in the Dashboard (https://dashboard.yapily.com)  # noqa: E501

    OpenAPI spec version: 0.0.131
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AuthorisationRequestResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'user_uuid': 'str',
        'application_user_id': 'str',
        'reference_id': 'str',
        'institution_id': 'str',
        'status': 'str',
        'created_at': 'datetime',
        'transaction_from': 'datetime',
        'transaction_to': 'datetime',
        'expires_at': 'datetime',
        'time_to_expire_in_millis': 'int',
        'time_to_expire': 'str',
        'feature_scope': 'list[str]',
        'consent_token': 'str',
        'authorisation_url': 'str',
        'starts_at': 'datetime',
        'total_max_amount': 'float',
        'max_amount_per_request': 'float'
    }

    attribute_map = {
        'id': 'id',
        'user_uuid': 'userUuid',
        'application_user_id': 'applicationUserId',
        'reference_id': 'referenceId',
        'institution_id': 'institutionId',
        'status': 'status',
        'created_at': 'createdAt',
        'transaction_from': 'transactionFrom',
        'transaction_to': 'transactionTo',
        'expires_at': 'expiresAt',
        'time_to_expire_in_millis': 'timeToExpireInMillis',
        'time_to_expire': 'timeToExpire',
        'feature_scope': 'featureScope',
        'consent_token': 'consentToken',
        'authorisation_url': 'authorisationUrl',
        'starts_at': 'startsAt',
        'total_max_amount': 'totalMaxAmount',
        'max_amount_per_request': 'maxAmountPerRequest'
    }

    def __init__(self, id=None, user_uuid=None, application_user_id=None, reference_id=None, institution_id=None, status=None, created_at=None, transaction_from=None, transaction_to=None, expires_at=None, time_to_expire_in_millis=None, time_to_expire=None, feature_scope=None, consent_token=None, authorisation_url=None, starts_at=None, total_max_amount=None, max_amount_per_request=None):  # noqa: E501
        """AuthorisationRequestResponse - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._user_uuid = None
        self._application_user_id = None
        self._reference_id = None
        self._institution_id = None
        self._status = None
        self._created_at = None
        self._transaction_from = None
        self._transaction_to = None
        self._expires_at = None
        self._time_to_expire_in_millis = None
        self._time_to_expire = None
        self._feature_scope = None
        self._consent_token = None
        self._authorisation_url = None
        self._starts_at = None
        self._total_max_amount = None
        self._max_amount_per_request = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if user_uuid is not None:
            self.user_uuid = user_uuid
        if application_user_id is not None:
            self.application_user_id = application_user_id
        if reference_id is not None:
            self.reference_id = reference_id
        if institution_id is not None:
            self.institution_id = institution_id
        if status is not None:
            self.status = status
        if created_at is not None:
            self.created_at = created_at
        if transaction_from is not None:
            self.transaction_from = transaction_from
        if transaction_to is not None:
            self.transaction_to = transaction_to
        if expires_at is not None:
            self.expires_at = expires_at
        if time_to_expire_in_millis is not None:
            self.time_to_expire_in_millis = time_to_expire_in_millis
        if time_to_expire is not None:
            self.time_to_expire = time_to_expire
        if feature_scope is not None:
            self.feature_scope = feature_scope
        if consent_token is not None:
            self.consent_token = consent_token
        if authorisation_url is not None:
            self.authorisation_url = authorisation_url
        if starts_at is not None:
            self.starts_at = starts_at
        if total_max_amount is not None:
            self.total_max_amount = total_max_amount
        if max_amount_per_request is not None:
            self.max_amount_per_request = max_amount_per_request

    @property
    def id(self):
        """Gets the id of this AuthorisationRequestResponse.  # noqa: E501


        :return: The id of this AuthorisationRequestResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AuthorisationRequestResponse.


        :param id: The id of this AuthorisationRequestResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def user_uuid(self):
        """Gets the user_uuid of this AuthorisationRequestResponse.  # noqa: E501


        :return: The user_uuid of this AuthorisationRequestResponse.  # noqa: E501
        :rtype: str
        """
        return self._user_uuid

    @user_uuid.setter
    def user_uuid(self, user_uuid):
        """Sets the user_uuid of this AuthorisationRequestResponse.


        :param user_uuid: The user_uuid of this AuthorisationRequestResponse.  # noqa: E501
        :type: str
        """

        self._user_uuid = user_uuid

    @property
    def application_user_id(self):
        """Gets the application_user_id of this AuthorisationRequestResponse.  # noqa: E501


        :return: The application_user_id of this AuthorisationRequestResponse.  # noqa: E501
        :rtype: str
        """
        return self._application_user_id

    @application_user_id.setter
    def application_user_id(self, application_user_id):
        """Sets the application_user_id of this AuthorisationRequestResponse.


        :param application_user_id: The application_user_id of this AuthorisationRequestResponse.  # noqa: E501
        :type: str
        """

        self._application_user_id = application_user_id

    @property
    def reference_id(self):
        """Gets the reference_id of this AuthorisationRequestResponse.  # noqa: E501


        :return: The reference_id of this AuthorisationRequestResponse.  # noqa: E501
        :rtype: str
        """
        return self._reference_id

    @reference_id.setter
    def reference_id(self, reference_id):
        """Sets the reference_id of this AuthorisationRequestResponse.


        :param reference_id: The reference_id of this AuthorisationRequestResponse.  # noqa: E501
        :type: str
        """

        self._reference_id = reference_id

    @property
    def institution_id(self):
        """Gets the institution_id of this AuthorisationRequestResponse.  # noqa: E501


        :return: The institution_id of this AuthorisationRequestResponse.  # noqa: E501
        :rtype: str
        """
        return self._institution_id

    @institution_id.setter
    def institution_id(self, institution_id):
        """Sets the institution_id of this AuthorisationRequestResponse.


        :param institution_id: The institution_id of this AuthorisationRequestResponse.  # noqa: E501
        :type: str
        """

        self._institution_id = institution_id

    @property
    def status(self):
        """Gets the status of this AuthorisationRequestResponse.  # noqa: E501


        :return: The status of this AuthorisationRequestResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AuthorisationRequestResponse.


        :param status: The status of this AuthorisationRequestResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["AWAITING_AUTHORIZATION", "AWAITING_RE_AUTHORIZATION", "AUTHORIZED", "REJECTED", "REVOKED", "FAILED", "EXPIRED", "UNKNOWN"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def created_at(self):
        """Gets the created_at of this AuthorisationRequestResponse.  # noqa: E501


        :return: The created_at of this AuthorisationRequestResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this AuthorisationRequestResponse.


        :param created_at: The created_at of this AuthorisationRequestResponse.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def transaction_from(self):
        """Gets the transaction_from of this AuthorisationRequestResponse.  # noqa: E501


        :return: The transaction_from of this AuthorisationRequestResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._transaction_from

    @transaction_from.setter
    def transaction_from(self, transaction_from):
        """Sets the transaction_from of this AuthorisationRequestResponse.


        :param transaction_from: The transaction_from of this AuthorisationRequestResponse.  # noqa: E501
        :type: datetime
        """

        self._transaction_from = transaction_from

    @property
    def transaction_to(self):
        """Gets the transaction_to of this AuthorisationRequestResponse.  # noqa: E501


        :return: The transaction_to of this AuthorisationRequestResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._transaction_to

    @transaction_to.setter
    def transaction_to(self, transaction_to):
        """Sets the transaction_to of this AuthorisationRequestResponse.


        :param transaction_to: The transaction_to of this AuthorisationRequestResponse.  # noqa: E501
        :type: datetime
        """

        self._transaction_to = transaction_to

    @property
    def expires_at(self):
        """Gets the expires_at of this AuthorisationRequestResponse.  # noqa: E501


        :return: The expires_at of this AuthorisationRequestResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this AuthorisationRequestResponse.


        :param expires_at: The expires_at of this AuthorisationRequestResponse.  # noqa: E501
        :type: datetime
        """

        self._expires_at = expires_at

    @property
    def time_to_expire_in_millis(self):
        """Gets the time_to_expire_in_millis of this AuthorisationRequestResponse.  # noqa: E501

        Deprecated. Use `timeToExpire` instead.  # noqa: E501

        :return: The time_to_expire_in_millis of this AuthorisationRequestResponse.  # noqa: E501
        :rtype: int
        """
        return self._time_to_expire_in_millis

    @time_to_expire_in_millis.setter
    def time_to_expire_in_millis(self, time_to_expire_in_millis):
        """Sets the time_to_expire_in_millis of this AuthorisationRequestResponse.

        Deprecated. Use `timeToExpire` instead.  # noqa: E501

        :param time_to_expire_in_millis: The time_to_expire_in_millis of this AuthorisationRequestResponse.  # noqa: E501
        :type: int
        """

        self._time_to_expire_in_millis = time_to_expire_in_millis

    @property
    def time_to_expire(self):
        """Gets the time_to_expire of this AuthorisationRequestResponse.  # noqa: E501

        ISO 8601 duration  # noqa: E501

        :return: The time_to_expire of this AuthorisationRequestResponse.  # noqa: E501
        :rtype: str
        """
        return self._time_to_expire

    @time_to_expire.setter
    def time_to_expire(self, time_to_expire):
        """Sets the time_to_expire of this AuthorisationRequestResponse.

        ISO 8601 duration  # noqa: E501

        :param time_to_expire: The time_to_expire of this AuthorisationRequestResponse.  # noqa: E501
        :type: str
        """

        self._time_to_expire = time_to_expire

    @property
    def feature_scope(self):
        """Gets the feature_scope of this AuthorisationRequestResponse.  # noqa: E501


        :return: The feature_scope of this AuthorisationRequestResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._feature_scope

    @feature_scope.setter
    def feature_scope(self, feature_scope):
        """Sets the feature_scope of this AuthorisationRequestResponse.


        :param feature_scope: The feature_scope of this AuthorisationRequestResponse.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["INITIATE_ACCOUNT_REQUEST", "ACCOUNT_REQUEST_DETAILS", "ACCOUNTS", "ACCOUNT", "ACCOUNT_TRANSACTIONS", "ACCOUNT_STATEMENTS", "ACCOUNT_STATEMENT", "ACCOUNT_STATEMENT_FILE", "ACCOUNT_TRANSACTIONS_WITH_MERCHANT", "IDENTITY", "INITIATE_SINGLE_PAYMENT_SORTCODE", "EXISTING_PAYMENT_INITIATION_DETAILS", "CREATE_SINGLE_PAYMENT_SORTCODE", "EXISTING_PAYMENTS_DETAILS", "INITIATE_PAYMENT", "CREATE_PAYMENT", "TRANSFER", "OPEN_DATA_PERSONAL_CURRENT_ACCOUNTS", "OPEN_DATA_ATMS"]  # noqa: E501
        if not set(feature_scope).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `feature_scope` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(feature_scope) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._feature_scope = feature_scope

    @property
    def consent_token(self):
        """Gets the consent_token of this AuthorisationRequestResponse.  # noqa: E501


        :return: The consent_token of this AuthorisationRequestResponse.  # noqa: E501
        :rtype: str
        """
        return self._consent_token

    @consent_token.setter
    def consent_token(self, consent_token):
        """Sets the consent_token of this AuthorisationRequestResponse.


        :param consent_token: The consent_token of this AuthorisationRequestResponse.  # noqa: E501
        :type: str
        """

        self._consent_token = consent_token

    @property
    def authorisation_url(self):
        """Gets the authorisation_url of this AuthorisationRequestResponse.  # noqa: E501


        :return: The authorisation_url of this AuthorisationRequestResponse.  # noqa: E501
        :rtype: str
        """
        return self._authorisation_url

    @authorisation_url.setter
    def authorisation_url(self, authorisation_url):
        """Sets the authorisation_url of this AuthorisationRequestResponse.


        :param authorisation_url: The authorisation_url of this AuthorisationRequestResponse.  # noqa: E501
        :type: str
        """

        self._authorisation_url = authorisation_url

    @property
    def starts_at(self):
        """Gets the starts_at of this AuthorisationRequestResponse.  # noqa: E501


        :return: The starts_at of this AuthorisationRequestResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._starts_at

    @starts_at.setter
    def starts_at(self, starts_at):
        """Sets the starts_at of this AuthorisationRequestResponse.


        :param starts_at: The starts_at of this AuthorisationRequestResponse.  # noqa: E501
        :type: datetime
        """

        self._starts_at = starts_at

    @property
    def total_max_amount(self):
        """Gets the total_max_amount of this AuthorisationRequestResponse.  # noqa: E501


        :return: The total_max_amount of this AuthorisationRequestResponse.  # noqa: E501
        :rtype: float
        """
        return self._total_max_amount

    @total_max_amount.setter
    def total_max_amount(self, total_max_amount):
        """Sets the total_max_amount of this AuthorisationRequestResponse.


        :param total_max_amount: The total_max_amount of this AuthorisationRequestResponse.  # noqa: E501
        :type: float
        """

        self._total_max_amount = total_max_amount

    @property
    def max_amount_per_request(self):
        """Gets the max_amount_per_request of this AuthorisationRequestResponse.  # noqa: E501


        :return: The max_amount_per_request of this AuthorisationRequestResponse.  # noqa: E501
        :rtype: float
        """
        return self._max_amount_per_request

    @max_amount_per_request.setter
    def max_amount_per_request(self, max_amount_per_request):
        """Sets the max_amount_per_request of this AuthorisationRequestResponse.


        :param max_amount_per_request: The max_amount_per_request of this AuthorisationRequestResponse.  # noqa: E501
        :type: float
        """

        self._max_amount_per_request = max_amount_per_request

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuthorisationRequestResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
